/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cpsViews;

import cpsControllers.ConversionController;
import cpsControllers.HelperController;
import cpsControllers.HistogramController;
import cpsControllers.LineChartController;
import cpsControllers.PropertiesController;
import cpsControllers.Signal01;
import cpsControllers.Signal02;
import cpsControllers.Signal03;
import cpsControllers.Signal04;
import cpsControllers.Signal05;
import cpsControllers.Signal06;
import cpsControllers.Signal07;
import cpsControllers.Signal08;
import cpsControllers.Signal09;
import cpsControllers.Signal10;
import cpsControllers.Signal11;
import cpsControllers.XMLController;
import cpsModels.AmplitudaModel;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import org.jfree.chart.ChartPanel;

/**
 *
 * @author koperingnet
 */
public class ParamsForm extends javax.swing.JFrame {
  

    /**
     * Creates new form ParamsForm
     */
    public ParamsForm() {
        initComponents();
           signalName.setText("Wybierz rodzaj sygnału oraz 'Wczytaj parametry' by wygenerować sygnał.");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        value_a = new javax.swing.JTextField();
        value_t1 = new javax.swing.JTextField();
        value_d = new javax.swing.JTextField();
        value_t = new javax.swing.JTextField();
        value_kw = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        value_ts = new javax.swing.JTextField();
        value_n1 = new javax.swing.JTextField();
        value_ns = new javax.swing.JTextField();
        value_f = new javax.swing.JTextField();
        value_p = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        sredniaValue = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        sredniaBezwzglednaValue = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        mocSredniaValue = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        wariancjaValue = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        wartoscSkutecznaValue = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        signalName = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Wybierz rodzaj sygnału:");

        jLabel2.setText("Amplituda (A):");

        jLabel3.setText("Czas początkowy (t1):");

        jLabel4.setText("Czas trwania sygnału (d):");

        jLabel5.setText("Okres podstawowy (T):");

        jLabel6.setText("Współczynnik wypełnienia (kw):");

        jButton1.setText("Generuj Sygnał");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "wybierz typ sygnału...",
            "Sygnal_S1",
            "Sygnal_S2",
            "Sygnal_S3",
            "Sygnal_S4",
            "Sygnal_S5",
            "Sygnal_S6",
            "Sygnal_S7",
            "Sygnal_S8",
            "Sygnal_S9",
            "Sygnal_S10",
            "Sygnal_S11"}));
jComboBox1.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
    }
    });

    jLabel7.setText("Skok jednostkowy (ts):");

    jLabel8.setText("Numer pierwszej próbki (n1):");

    jLabel9.setText("Skok dla próbki (ns):");

    jLabel10.setText("Częstotliwość próbkowania (f):");

    jLabel11.setText("Prawdopodobieństwo (p):");

    jButton3.setText("Zapisz parametry");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setText("Wczytaj patametry");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jPanel1.setBackground(java.awt.Color.gray);
    jPanel1.setToolTipText("HISTOGRAM");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 449, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );

    sredniaValue.setBackground(java.awt.SystemColor.control);

    jLabel12.setText("Średnia wartość:");

    sredniaBezwzglednaValue.setBackground(java.awt.SystemColor.control);

    jLabel13.setText("Wartość średnia bezwzgledna:");

    jPanel2.setBackground(java.awt.Color.gray);
    jPanel2.setForeground(new java.awt.Color(130, 145, 150));

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 450, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 353, Short.MAX_VALUE)
    );

    mocSredniaValue.setBackground(java.awt.SystemColor.control);

    jLabel14.setText("Moc średnia:");

    wariancjaValue.setBackground(java.awt.SystemColor.control);
    wariancjaValue.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            wariancjaValueActionPerformed(evt);
        }
    });

    jLabel15.setText("Wariancja:");

    wartoscSkutecznaValue.setBackground(java.awt.SystemColor.control);

    jLabel16.setText("Wartość skuteczna:");

    signalName.setBackground(java.awt.SystemColor.controlDkShadow);
    signalName.setFont(new java.awt.Font("Cantarell", 1, 14)); // NOI18N
    signalName.setForeground(java.awt.Color.orange);
    signalName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    signalName.setDisabledTextColor(java.awt.Color.white);

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "wybierz typ konwersji sygnału...",
        "Probkowanie",
        "Kwantyzacja",
        "Ekstrapolacja",
        "Interpolacj",
        "Rekonstrukcja_sinc"}));
jComboBox2.addActionListener(new java.awt.event.ActionListener() {
public void actionPerformed(java.awt.event.ActionEvent evt) {
    jComboBox2ActionPerformed(evt);
    }
    });

    jButton2.setText("Konwertuj Sygnał");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel11)
                .addComponent(jLabel9)
                .addComponent(jLabel8)
                .addComponent(jLabel7)
                .addComponent(jLabel1)
                .addComponent(jLabel6)
                .addComponent(jLabel5)
                .addComponent(jLabel4)
                .addComponent(jLabel3)
                .addComponent(jLabel2)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel10)
                    .addGap(6, 6, 6))
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(value_p, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(value_f, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_ns, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_n1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_ts, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_a, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_t1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_d, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_t, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(value_kw, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(65, 65, 65)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sredniaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel14))
                                    .addGap(12, 12, 12)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(sredniaBezwzglednaValue, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                        .addComponent(mocSredniaValue))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel15)
                                        .addComponent(jLabel16))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(wartoscSkutecznaValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                        .addComponent(wariancjaValue, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(84, 84, 84)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(signalName, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 7, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(28, 28, 28)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(value_a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(signalName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sredniaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wariancjaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addComponent(jLabel12))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(sredniaBezwzglednaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(wartoscSkutecznaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mocSredniaValue, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(value_t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(value_d, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(value_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(value_kw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(value_ts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(value_n1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(value_ns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10)
                        .addComponent(value_f, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(value_p, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(jButton3))
                    .addGap(0, 228, Short.MAX_VALUE))))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        properties.setProperties("signals.properties", "A", value_a.getText());
        properties.setProperties("signals.properties", "t1", value_t1.getText());
        properties.setProperties("signals.properties", "t", value_t.getText());
        properties.setProperties("signals.properties", "d", value_d.getText());
        properties.setProperties("signals.properties", "kw", value_kw.getText());
        properties.setProperties("signals.properties", "ts", value_ts.getText());
        properties.setProperties("signals.properties", "n1", value_n1.getText());
        properties.setProperties("signals.properties", "ns", value_ns.getText());
        properties.setProperties("signals.properties", "f", value_f.getText());
        properties.setProperties("signals.properties", "p", value_p.getText());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        String signalNames = (String)cb.getSelectedItem();
        
        if (null != signalNames) switch (signalNames) {
            case "Sygnal_S1":
                typSygnalu = 1;
                signalName.setText("SZUM O ROZKŁADZIE JEDNOSTAJNYM");
                break;
            case "Sygnal_S2":
                typSygnalu = 2;
                signalName.setText("SZUM GAUSSOWSKI");
                break;
            case "Sygnal_S3":
                typSygnalu = 3;
                signalName.setText("SYGNAŁ SINUSOIDALNY");
                break;
            case "Sygnal_S4":
                typSygnalu = 4;
                signalName.setText("SYGNAŁ SINUSOIDALNY WYPROSTOWANY JEDNOPOŁÓWKOWO");
                break;
            case "Sygnal_S5":
                typSygnalu = 5;
                signalName.setText("SYGNAŁ SINUSOIDALNY WYPROSTOWANY DWUPOŁÓWKOWO");
                break;
            case "Sygnal_S6":
                typSygnalu = 6;
                signalName.setText("SYGNAŁ PROSTOKĄTNY");
                break;
            case "Sygnal_S7":
                typSygnalu = 7;
                signalName.setText("SYGNAŁ PROSTOKĄTNY SYMETRYCZNY");
                break;
            case "Sygnal_S8":
                typSygnalu = 8;
                signalName.setText("SYGNAŁ TRÓJKĄTNY (PIŁOKSZTAŁTNY)");
                break;
            case "Sygnal_S9":
                typSygnalu = 9;
                signalName.setText("SKOK JEDNOSTKOWY");
                break;
            case "Sygnal_S10":
                typSygnalu = 10;
                signalName.setText("IMPULS JEDNOSTKOWY");
                break;
            case "Sygnal_S11":
                typSygnalu = 11;
                signalName.setText("SZUM IMPULSOWY");
                break;
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        value_a.setText(properties.getProperties("signals.properties", "A").toString());
        value_t.setText(properties.getProperties("signals.properties", "t").toString());
        value_t1.setText(properties.getProperties("signals.properties", "t1").toString());
        value_d.setText(properties.getProperties("signals.properties", "d").toString());
        value_kw.setText(properties.getProperties("signals.properties", "kw").toString());
        value_ts.setText(properties.getProperties("signals.properties", "ts").toString());
        value_n1.setText(properties.getProperties("signals.properties", "n1").toString());
        value_ns.setText(properties.getProperties("signals.properties", "ns").toString());
        value_f.setText(properties.getProperties("signals.properties", "f").toString());
        value_p.setText(properties.getProperties("signals.properties", "p").toString());
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        HelperController helper = new HelperController(typSygnalu, 
            Double.parseDouble(value_a.getText()), 
            Double.parseDouble(value_t1.getText()), 
            Double.parseDouble(value_ts.getText()), 
            Double.parseDouble(value_d.getText()), 
            Double.parseDouble(value_t.getText()), 
            Double.parseDouble(value_kw.getText()), 
            Double.parseDouble(value_n1.getText()), 
            Double.parseDouble(value_ns.getText()), 
            Double.parseDouble(value_p.getText())
        );
        Signal01 s1 = new Signal01(helper);
        Signal02 s2 = new Signal02(helper);
        Signal03 s3 = new Signal03(helper);
        Signal04 s4 = new Signal04(helper);
        Signal05 s5 = new Signal05(helper);
        Signal06 s6 = new Signal06(helper);
        Signal07 s7 = new Signal07(helper);
        Signal08 s8 = new Signal08(helper);
        Signal09 s9 = new Signal09(helper);
        Signal10 s10 = new Signal10(helper);
        Signal11 s11 = new Signal11(helper);
        
        
        for (int t=Integer.parseInt(value_t1.getText()); t<=Integer.parseInt(value_d.getText()); t++){
            time.add(t);
            if (typSygnalu == 1) {
                listSignalValues.add(s1.sygnalS1());
//                try {
//                    System.out.println(xmlc.load("testFile"));
//                } catch (FileNotFoundException ex) {
//                    Logger.getLogger(ParamsForm.class.getName()).log(Level.SEVERE, null, ex);
//                }
                    sredniaValue.setText(Double.toString(s1.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s1.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s1.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s1.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s1.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 2) {
                listSignalValues.add(s2.sygnalS2());
                    sredniaValue.setText(Double.toString(s2.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s2.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s2.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s2.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s2.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 3) {
                listSignalValues.add(s3.sygnalS3(t));
                    sredniaValue.setText(Double.toString(s3.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s3.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s3.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s3.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s3.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 4) {
                listSignalValues.add(s4.sygnalS4(t));
                    sredniaValue.setText(Double.toString(s4.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s4.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s4.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s4.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s4.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 5) {
                listSignalValues.add(s5.sygnalS5(t));
                    sredniaValue.setText(Double.toString(s5.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s5.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s5.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s5.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s5.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 6) {
                listSignalValues.add(s6.sygnalS6(t));
                    sredniaValue.setText(Double.toString(s6.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s6.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s6.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s6.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s6.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 7) {
                listSignalValues.add(s7.sygnalS7(t));
                    sredniaValue.setText(Double.toString(s7.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s7.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s7.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s7.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s7.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 8) {
                listSignalValues.add(s8.sygnalS8(t));
                    sredniaValue.setText(Double.toString(s8.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s8.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s8.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s8.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s8.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 9) {
                listSignalValues.add(s9.sygnalS9(t));
                   sredniaValue.setText(Double.toString(s9.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s9.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s9.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s9.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s9.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 10) {
                listSignalValues.add(s10.sygnalS10(t));
                    sredniaValue.setText(Double.toString(s10.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s10.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s10.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s10.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s10.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            } else if (typSygnalu == 11) {
                listSignalValues.add(s11.sygnalS11(t));
                    sredniaValue.setText(Double.toString(s11.obl_sredniawartosc(listSignalValues)));
                    sredniaBezwzglednaValue.setText(Double.toString(s11.obl_sredniawartoscbezwzgledna(listSignalValues)));
                    mocSredniaValue.setText(Double.toString(s11.obl_mocsrednia(listSignalValues)));
                    wariancjaValue.setText(Double.toString(s11.obl_wariancja(listSignalValues)));
                    wartoscSkutecznaValue.setText(Double.toString(s11.obl_wartoscskuteczna(listSignalValues)));
                    xmlc.saveXML(am);
            }
            
        }  
            
            ChartPanel CP = new ChartPanel(histogram.createHistogram(time, listSignalValues)); 
            jPanel1.setLayout(new java.awt.BorderLayout());
            jPanel1.add(CP,BorderLayout.CENTER);
            jPanel1.validate();
          
            LineChartController lcc = new LineChartController();
            ChartPanel lccPanel = new ChartPanel(lcc.printChart(time, listSignalValues)); 
            jPanel2.setLayout(new java.awt.BorderLayout());
            jPanel2.add(lccPanel, BorderLayout.CENTER);
            jPanel2.validate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void wariancjaValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wariancjaValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wariancjaValueActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        JComboBox convertBox = (JComboBox)evt.getSource();
        String convertMethod = (String)convertBox.getSelectedItem();
        
        if (null != convertMethod) switch (convertMethod) {
            case "Probkowanie":
                rodzajKonwersji = 1;
                signalName.setText("");
                break;
            case "Kwantyzacja":
                rodzajKonwersji = 2;
                signalName.setText("");
                break;
            case "Ekstrapolacja":
                rodzajKonwersji = 3;
                signalName.setText("");
                break;
            case "Interpolacja":
                rodzajKonwersji = 4;
                signalName.setText("");
                break;
            case "Rekonstrukcja_sinc":
                rodzajKonwersji = 5;
                signalName.setText("");
                break;
        }
       
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        HelperController helper = new HelperController(typSygnalu, 
            Double.parseDouble(value_a.getText()), 
            Double.parseDouble(value_t1.getText()), 
            Double.parseDouble(value_ts.getText()), 
            Double.parseDouble(value_d.getText()), 
            Double.parseDouble(value_t.getText()), 
            Double.parseDouble(value_kw.getText()), 
            Double.parseDouble(value_n1.getText()), 
            Double.parseDouble(value_ns.getText()), 
            Double.parseDouble(value_p.getText())
        );
        
        Signal01 s1 = new Signal01(helper);
        Signal02 s2 = new Signal02(helper);
        Signal03 s3 = new Signal03(helper);
        Signal04 s4 = new Signal04(helper);
        Signal05 s5 = new Signal05(helper);
        Signal06 s6 = new Signal06(helper);
        Signal07 s7 = new Signal07(helper);
        Signal08 s8 = new Signal08(helper);
        Signal09 s9 = new Signal09(helper);
        Signal10 s10 = new Signal10(helper);
        Signal11 s11 = new Signal11(helper);
        
        
       ConversionController cc;
       
       
        for (int t=Integer.parseInt(value_t1.getText()); t<=Integer.parseInt(value_d.getText()); t++){
            time.add(t); 
             LineChartController lcc = new LineChartController(); 
           cc = new ConversionController(10, 5, time.size());
            if (rodzajKonwersji == 1) {
                listSignalValues.add(s5.sygnalS5(t));
                lccPanel = new ChartPanel(lcc.printChart(time, cc.probkowanie(time, listSignalValues)));

//                    xmlc.saveXML(am);
            } else if (rodzajKonwersji == 2) {
                listSignalValues.add(s5.sygnalS5(t));
                lccPanel = new ChartPanel(lcc.printChart(time, cc.kwantyzacjaZobcieciem(listSignalValues)));
            }
        }
        
            
        LineChartController lcc1 = new LineChartController();
            ChartPanel lccPanel1 = new ChartPanel(lcc1.printChart(time, listSignalValues)); 
            jPanel1.setLayout(new java.awt.BorderLayout());
            jPanel1.add(lccPanel1, BorderLayout.CENTER);
            jPanel1.validate();
        
             jPanel2.setLayout(new java.awt.BorderLayout());
            jPanel2.add(lccPanel, BorderLayout.CENTER);
            jPanel2.validate();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParamsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParamsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParamsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParamsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParamsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField mocSredniaValue;
    private javax.swing.JTextField signalName;
    private javax.swing.JTextField sredniaBezwzglednaValue;
    private javax.swing.JTextField sredniaValue;
    private javax.swing.JTextField value_a;
    private javax.swing.JTextField value_d;
    private javax.swing.JTextField value_f;
    private javax.swing.JTextField value_kw;
    private javax.swing.JTextField value_n1;
    private javax.swing.JTextField value_ns;
    private javax.swing.JTextField value_p;
    private javax.swing.JTextField value_t;
    private javax.swing.JTextField value_t1;
    private javax.swing.JTextField value_ts;
    private javax.swing.JTextField wariancjaValue;
    private javax.swing.JTextField wartoscSkutecznaValue;
    // End of variables declaration//GEN-END:variables
PropertiesController properties = new PropertiesController();
HistogramController histogram = new HistogramController();
ArrayList<Double> listSignalValues = new ArrayList<>();
ArrayList<Integer> time = new ArrayList<>();
XMLController xmlc = new XMLController();
AmplitudaModel am = new AmplitudaModel(time, listSignalValues);
int typSygnalu;
int rodzajKonwersji;
ChartPanel lccPanel;

}
